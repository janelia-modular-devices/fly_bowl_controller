* Header                                                           :noexport:

  #+MACRO: name fly_bowl_controller
  #+MACRO: version 1.0
  #+MACRO: license BSD, Open-Source Hardware
  #+MACRO: url https://github.com/janelia-modular-devices/fly_bowl_controller
  #+AUTHOR: Peter Polidoro
  #+EMAIL: peterpolidoro@gmail.com

* Description

  This device controls the IR and visible backlights in the fly bowl rig along
  with the backlight cooling fans and indicator lights.

* Usage Instructions

** Arduino Serial Monitor

   #+BEGIN_SRC sh
     ?
     # {
     #   "id": "?",
     #   "result": {
     #     "device_id": {
     #       "name": "fly_bowl_controller",
     #       "form_factor": "5x3",
     #       "serial_number": 0
     #     },
     #     "api": {
     #       "firmware": [
     #         "FlyBowlController"
     #       ],
     #       "verbosity": "NAMES",
     #       "functions": [
     #         "setIrBacklightsOnAtPower",
     #         "setVisibleBacklightsOnAtPower",
     #         "addVisibleBacklightsPwm",
     #         "addExperimentStep",
     #         "getExperimentSteps",
     #         "getExperimentStatus"
     #       ],
     #       "parameters": [
     #         "pulse_delay",
     #         "pulse_period",
     #         "pulse_on_duration",
     #         "pulse_count",
     #         "sequence_off_duration",
     #         "sequence_count",
     #         "step_delay",
     #         "step_duration"
     #       ],
     #       "properties": [
     #         "flyBowlsEnabled"
     #       ],
     #       "callbacks": [
     #         "setIrBacklightsOn",
     #         "setIrBacklightsOff",
     #         "setVisibleBacklightsOn",
     #         "setVisibleBacklightsOff",
     #         "removeAllExperimentSteps",
     #         "runExperiment",
     #         "stopExperiment"
     #       ]
     #     }
     #   }
     # }
     setPropertiesToDefaults [ALL]
     # {
     #   "id": "setPropertiesToDefaults",
     #   "result": null
     # }
     flyBowlsEnabled getValue
     # {
     #   "id": "flyBowlsEnabled",
     #   "result": [
     #     true,
     #     true,
     #     true,
     #     true
     #   ]
     # }
     flyBowlsEnabled setValue [true,false,true,false]
     # {
     #   "id": "flyBowlsEnabled",
     #   "result": [
     #     true,
     #     false,
     #     true,
     #     false
     #   ]
     # }
     setIrBacklightsOnAtPower 90
     # {
     #   "id": "setIrBacklightsOnAtPower",
     #   "result": null
     # }
     removeAllExperimentSteps
     # {
     #   "id": "removeAllExperimentSteps",
     #   "result": null
     # }
     addExperimentStep ?
     # {
     #   "id": "addExperimentStep",
     #   "result": {
     #     "name": "addExperimentStep",
     #     "firmware": "FlyBowlController",
     #     "parameters": [
     #       "power",
     #       "pulse_period",
     #       "pulse_on_duration",
     #       "pulse_count",
     #       "sequence_off_duration",
     #       "sequence_count",
     #       "step_delay",
     #       "step_duration"
     #     ],
     #     "result_info": {
     #       "type": "long"
     #     }
     #   }
     # }
     addExperimentStep 90 100 50 25 2500 4 4.0 30.0
     # {
     #   "id": "addExperimentStep",
     #   "result": 0
     # }
     addExperimentStep 75 100 50 35 2500 4 0.0 20.0
     # {
     #   "id": "addExperimentStep",
     #   "result": 1
     # }
     getExperimentSteps
     # {
     #   "id": "getExperimentSteps",
     #   "result": [
     #     {
     #       "power": 90.000000,
     #       "pulse_period": 100,
     #       "pulse_on_duration": 50,
     #       "pulse_count": 25,
     #       "sequence_off_duration": 2500,
     #       "sequence_count": 4,
     #       "step_delay": 4.000000,
     #       "step_duration": 30.000000
     #     },
     #     {
     #       "power": 75.000000,
     #       "pulse_period": 100,
     #       "pulse_on_duration": 50,
     #       "pulse_count": 35,
     #       "sequence_off_duration": 2500,
     #       "sequence_count": 4,
     #       "step_delay": 0.000000,
     #       "step_duration": 20.000000
     #     }
     #   ]
     # }
     getExperimentStatus
     # {
     #   "id": "getExperimentStatus",
     #   "result": {
     #     "state": "EXPERIMENT_NOT_RUNNING",
     #     "experiment_step_index": 0,
     #     "experiment_step_count": 2,
     #     "sequence_index": 0,
     #     "sequence_count": 0
     #   }
     # }
     runExperiment
     # {
     #   "id": "runExperiment",
     #   "result": null
     # }
     getExperimentStatus
     # {
     #   "id": "getExperimentStatus",
     #   "result": {
     #     "state": "EXPERIMENT_RUNNING",
     #     "experiment_step_index": 0,
     #     "experiment_step_count": 2,
     #     "sequence_index": 2,
     #     "sequence_count": 4
     #   }
     # }
     getExperimentStatus
     # {
     #   "id": "getExperimentStatus",
     #   "result": {
     #     "state": "EXPERIMENT_NOT_RUNNING",
     #     "experiment_step_index": 0,
     #     "experiment_step_count": 2,
     #     "sequence_index": 0,
     #     "sequence_count": 0
     #   }
     # }
     setVisibleBacklightsOnAtPower 68
     # {
     #   "id": "setVisibleBacklightsOnAtPower",
     #   "result": null
     # }
     setVisibleBacklightsOff
     # {
     #   "id": "setVisibleBacklightsOff",
     #   "result": null
     # }
     addVisibleBacklightsPwm ?
     # {
     #   "id": "addVisibleBacklightsPwm",
     #   "result": {
     #     "name": "addVisibleBacklightsPwm",
     #     "firmware": "FlyBowlController",
     #     "parameters": [
     #       "power",
     #       "pulse_delay",
     #       "pulse_period",
     #       "pulse_on_duration",
     #       "pulse_count"
     #     ],
     #     "result_info": {
     #       "type": "long"
     #     }
     #   }
     # }
     addVisibleBacklightsPwm 100 5000 100 50 1000
     # {
     #   "id": "addVisibleBacklightsPwm",
     #   "result": 0
     # }
     stopPwm 0
     # {
     #   "id": "stopPwm",
     #   "result": null
     # }
     setIrBacklightsOff
     # {
     #   "id": "setIrBacklightsOff",
     #   "result": null
     # }
   #+END_SRC

** Python

   #+BEGIN_SRC python
     from modular_client import ModularClient
     dev = ModularClient() # Automatically finds device if one available
     dev.get_device_id()
     # {'name': 'fly_bowl_controller', 'form_factor': '5x3', 'serial_number': 0}
     dev.set_properties_to_defaults(['ALL'])
     dev.fly_bowls_enabled('getValue')
     # [True, True, True, True]
     dev.fly_bowls_enabled('setValue',[True,False,True,False])
     # [True, False, True, False]
     dev.set_ir_backlights_on_at_power(90) # 90 percent. Automatically turns fans on too
     dev.remove_all_experiment_steps()
     power = 90 # 90 percent
     pulse_period = 100 # 100 ms
     pulse_on_duration = 50 # 50 ms
     pulse_count = 25
     sequence_off_duration = 2500 # 2500 ms
     sequence_count = 4
     step_delay = 4.0 # 4.0 s
     step_duration = 30.0 # 30.0 s
     dev.add_experiment_step(power,
                             pulse_period,
                             pulse_on_duration,
                             pulse_count,
                             sequence_off_duration,
                             sequence_count,
                             step_delay,
                             step_duration)
     # 0
     power = 75 # 75 percent
     pulse_count = 35
     step_delay = 0.0 # 0.0 s
     step_duration = 20.0 # 20.0 s
     dev.add_experiment_step(power,
                             pulse_period,
                             pulse_on_duration,
                             pulse_count,
                             sequence_off_duration,
                             sequence_count,
                             step_delay,
                             step_duration)
     # 1
     dev.get_experiment_steps()
     # [{'power': 90.0,
     #   'pulse_period': 100,
     #   'pulse_on_duration': 50,
     #   'pulse_count': 25,
     #   'sequence_off_duration': 2500,
     #   'sequence_count': 4,
     #   'step_delay': 4.0,
     #   'step_duration': 30.0},
     #  {'power': 75.0,
     #   'pulse_period': 100,
     #   'pulse_on_duration': 50,
     #   'pulse_count': 35,
     #   'sequence_off_duration': 2500,
     #   'sequence_count': 4,
     #   'step_delay': 0.0,
     #   'step_duration': 20.0}]
     dev.get_experiment_status()
     # {'state': 'EXPERIMENT_NOT_RUNNING',
     #  'experiment_step_index': 0,
     #  'experiment_step_count': 2,
     #  'sequence_index': 0,
     #  'sequence_count': 0}
     dev.run_experiment()
     dev.get_experiment_status()
     # {'state': 'EXPERIMENT_RUNNING',
     #  'experiment_step_index': 0,
     #  'experiment_step_count': 2,
     #  'sequence_index': 3,
     #  'sequence_count': 4}
     #
     # wait until experiment finishes or dev.stop_experiment()
     dev.get_experiment_status()
     # {'state': 'EXPERIMENT_NOT_RUNNING',
     #  'experiment_step_index': 0,
     #  'experiment_step_count': 2,
     #  'sequence_index': 0,
     #  'sequence_count': 0}
     dev.set_visible_backlights_on_at_power(68) # 68 percent
     dev.set_visible_backlights_off()
     dev.add_visible_backlights_pwm('?')
     # {'name': 'addVisibleBacklightsPwm',
     #  'firmware': 'FlyBowlController',
     #  'parameters': ['power',
     #                 'pulse_delay',
     #                 'pulse_period',
     #                 'pulse_on_duration',
     #                 'pulse_count'],
     #  'result_info': {'type': 'long'}}
     power = 100 # 100 percent
     pulse_delay = 1000 # 1000 ms
     pulse_period = 100 # 100 ms
     pulse_on_duration = 50 # 50 ms
     pulse_count = 1000
     pwm_index = dev.add_visible_backlights_pwm(power,
                                                pulse_delay,
                                                pulse_period,
                                                pulse_on_duration,
                                                pulse_count)
     dev.stop_pwm(pwm_index)
     dev.set_ir_backlights_off() # Automatically turns fans off too
   #+END_SRC

** Matlab

   #+BEGIN_SRC matlab
     % Linux and Mac OS X
     ls /dev/tty*
     % example Linux serial port
     serial_port = '/dev/ttyACM0'
     % example Mac OS X serial port
     serial_port = '/dev/tty.usbmodem262471'
     % Windows
     getAvailableComPorts()
     % 'COM1'
     % 'COM4'
     % example Windows serial port
     serial_port = 'COM4';
     dev = ModularClient(serial_port); % creates a device object
     dev.open();                       % opens a serial connection to the device
     dev.getDeviceId()
     %          name: 'fly_bowl_controller'
     %   form_factor: '5x3'
     % serial_number: 0
     dev.setPropertiesToDefaults({'ALL'});
     dev.flyBowlsEnabled('getValue')
     % [1]    [1]    [1]    [1]
     dev.flyBowlsEnabled('setValue',{true,false,true,false})
     % [1]    [0]    [1]    [0]
     dev.setIrBacklightsOnAtPower(90); % 90 percent. Automatically turns on fans too
     dev.removeAllExperimentSteps();
     power = 90; % 90 percent
     pulse_period = 100; % 100 ms
     pulse_on_duration = 50; % 50 ms
     pulse_count = 25;
     sequence_off_duration = 2500; % 2500 ms
     sequence_count = 4;
     step_delay = 4.0; % 4.0 s
     step_duration = 30.0; % 30.0 s
     dev.addExperimentStep(power, ...
                           pulse_period, ...
                           pulse_on_duration, ...
                           pulse_count, ...
                           sequence_off_duration, ...
                           sequence_count, ...
                           step_delay, ...
                           step_duration)
     % 0
     power = 75; % 75 percent
     pulse_count = 35;
     step_delay = 0.0; % 0.0 s
     step_duration = 20.0; % 20.0 s
     dev.addExperimentStep(power, ...
                           pulse_period, ...
                           pulse_on_duration, ...
                           pulse_count, ...
                           sequence_off_duration, ...
                           sequence_count, ...
                           step_delay, ...
                           step_duration)
     % 1
     experiment_steps = dev.getExperimentSteps();
     experiment_steps{1}
     %                 power: 90
     %          pulse_period: 100
     %     pulse_on_duration: 50
     %           pulse_count: 25
     % sequence_off_duration: 2500
     %        sequence_count: 4
     %            step_delay: 4
     %         step_duration: 30
     experiment_steps{2}
     %                 power: 70
     %          pulse_period: 100
     %     pulse_on_duration: 50
     %           pulse_count: 35
     % sequence_off_duration: 2500
     %        sequence_count: 4
     %            step_delay: 0
     %         step_duration: 20
     dev.getExperimentStatus()
     %                 state: 'EXPERIMENT_NOT_RUNNING'
     % experiment_step_index: 0
     % experiment_step_count: 2
     %        sequence_index: 0
     %        sequence_count: 0
     dev.runExperiment()
     dev.getExperimentStatus()
     %                 state: 'EXPERIMENT_RUNNING'
     % experiment_step_index: 0
     % experiment_step_count: 2
     %        sequence_index: 2
     %        sequence_count: 4
     %
     % wait until experiment finishes or dev.stopExperiment()
     dev.getExperimentStatus()
     %                 state: 'EXPERIMENT_NOT_RUNNING'
     % experiment_step_index: 0
     % experiment_step_count: 2
     %        sequence_index: 0
     %        sequence_count: 0
     dev.setVisibleBacklightsOnAtPower(68); % 68 percent
     dev.setVisibleBacklightsOff();
     power = 100; % 100 percent
     pulse_delay = 1000; % 1000 ms
     pulse_period = 100; % 100 ms
     pulse_on_duration = 50; % 50 ms
     pulse_count = 1000;
     pwm_index = dev.addVisibleBacklightsPwm(power, ...
                                             pulse_delay, ...
                                             pulse_period, ...
                                             pulse_on_duration, ...
                                             pulse_count);
     dev.stopPwm(pwm_index);
     dev.setIrBacklightsOff();
     dev.close();
     clear dev;
   #+END_SRC

* Build Instructions
