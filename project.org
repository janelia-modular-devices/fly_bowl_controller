* Header                                                           :noexport:

  #+MACRO: name fly_bowl_controller
  #+MACRO: version 2.0
  #+MACRO: license BSD, Open-Source Hardware
  #+MACRO: url https://github.com/janelia-modular-devices/fly_bowl_controller
  #+AUTHOR: Peter Polidoro
  #+EMAIL: peter@polidoro.io

* Description

  This device controls the IR and visible backlights in the fly bowl rig along
  with the backlight cooling fans and indicator lights.

* Usage Instructions

** Example Code
*** Arduino Serial Monitor

    #+BEGIN_SRC sh
      ?
      # {
      #   "id": "?",
      #   "result": {
      #     "device_id": {
      #       "name": "fly_bowl_controller",
      #       "form_factor": "5x3",
      #       "serial_number": 0
      #     },
      #     "api": {
      #       "firmware": [
      #         "FlyBowlController"
      #       ],
      #       "verbosity": "NAMES",
      #       "functions": [
      #         "setIrBacklightsAndFansOnAtPower",
      #         "setIrBacklightsAndFansOnAtIntensity",
      #         "setVisibleBacklightsAndIndicatorsOnAtPower",
      #         "setVisibleBacklightsAndIndicatorsOnAtIntensity",
      #         "addVisibleBacklightsPwm",
      #         "addExperimentStep",
      #         "getExperimentSteps",
      #         "getExperimentStatus"
      #       ],
      #       "parameters": [
      #         "pulse_delay",
      #         "pulse_period",
      #         "pulse_on_duration",
      #         "pulse_count",
      #         "sequence_off_duration",
      #         "sequence_count",
      #         "step_delay",
      #         "step_duration"
      #       ],
      #       "properties": [
      #         "flyBowlsEnabled"
      #       ],
      #       "callbacks": [
      #         "setIrBacklightsAndFansOn",
      #         "setIrBacklightsAndFansOff",
      #         "setVisibleBacklightsAndIndicatorsOn",
      #         "setVisibleBacklightsAndIndicatorsOff",
      #         "removeAllExperimentSteps",
      #         "runExperiment",
      #         "stopExperiment"
      #       ]
      #     }
      #   }
      # }
      setPropertiesToDefaults [ALL]
      # {
      #   "id": "setPropertiesToDefaults",
      #   "result": null
      # }
      flyBowlsEnabled getValue
      # {
      #   "id": "flyBowlsEnabled",
      #   "result": [
      #     true,
      #     true,
      #     true,
      #     true
      #   ]
      # }
      flyBowlsEnabled setValue [true,false,true,false]
      # {
      #   "id": "flyBowlsEnabled",
      #   "result": [
      #     true,
      #     false,
      #     true,
      #     false
      #   ]
      # }
      irBacklightPowerToIntensityRatio setValue [5.99,5.59,5.41,5.57]
      # {
      #   "id": "irBacklightPowerToIntensityRatio",
      #   "result": [
      #     5.990000,
      #     5.590000,
      #     5.410000,
      #     5.570000
      #   ]
      # }
      visibleBacklightPowerToIntensityRatio setValue [14.66,15.87,14.04,14.77]
      # {
      #   "id": "visibleBacklightPowerToIntensityRatio",
      #   "result": [
      #     14.660000,
      #     15.870000,
      #     14.040000,
      #     14.770000
      #   ]
      # }
      setIrBacklightsAndFansOnAtIntensity 4.5
      # {
      #   "id": "setIrBacklightsAndFansOnAtIntensity",
      #   "result": null
      # }
      removeAllExperimentSteps
      # {
      #   "id": "removeAllExperimentSteps",
      #   "result": null
      # }
      addExperimentStep ?
      # {
      #   "id": "addExperimentStep",
      #   "result": {
      #     "name": "addExperimentStep",
      #     "firmware": "FlyBowlController",
      #     "parameters": [
      #       "intensity",
      #       "pulse_period",
      #       "pulse_on_duration",
      #       "pulse_count",
      #       "sequence_off_duration",
      #       "sequence_count",
      #       "step_delay",
      #       "step_duration"
      #     ],
      #     "result_info": {
      #       "type": "long"
      #     }
      #   }
      # }
      addExperimentStep 1.71 100 50 5 750 4 1.0 6.0
      # {
      #   "id": "addExperimentStep",
      #   "result": 0
      # }
      addExperimentStep 2.7 100 50 35 2500 4 0.0 20.0
      # {
      #   "id": "addExperimentStep",
      #   "result": 1
      # }
      getExperimentSteps
      # {
      #   "id": "getExperimentSteps",
      #   "result": [
      #     {
      #       "intensity": 1.710000,
      #       "pulse_period": 100,
      #       "pulse_on_duration": 50,
      #       "pulse_count": 5,
      #       "sequence_off_duration": 750,
      #       "sequence_count": 4,
      #       "step_delay": 1.000000,
      #       "step_duration": 6.000000
      #     },
      #     {
      #       "intensity": 2.700000,
      #       "pulse_period": 100,
      #       "pulse_on_duration": 50,
      #       "pulse_count": 35,
      #       "sequence_off_duration": 2500,
      #       "sequence_count": 4,
      #       "step_delay": 0.000000,
      #       "step_duration": 20.000000
      #     }
      #   ]
      # }
      getExperimentStatus
      # {
      #   "id": "getExperimentStatus",
      #   "result": {
      #     "state": "EXPERIMENT_NOT_RUNNING",
      #     "experiment_step_index": 0,
      #     "experiment_step_count": 2,
      #     "sequence_index": 0,
      #     "sequence_count": 0
      #   }
      # }
      runExperiment
      # {
      #   "id": "runExperiment",
      #   "result": null
      # }
      getExperimentStatus
      # {
      #   "id": "getExperimentStatus",
      #   "result": {
      #     "state": "EXPERIMENT_RUNNING",
      #     "experiment_step_index": 0,
      #     "experiment_step_count": 2,
      #     "sequence_index": 2,
      #     "sequence_count": 4
      #   }
      # }
      getExperimentStatus
      # {
      #   "id": "getExperimentStatus",
      #   "result": {
      #     "state": "EXPERIMENT_NOT_RUNNING",
      #     "experiment_step_index": 0,
      #     "experiment_step_count": 2,
      #     "sequence_index": 0,
      #     "sequence_count": 0
      #   }
      # }
      setVisibleBacklightsAndIndicatorsOnAtIntensity 4.6
      # {
      #   "id": "setVisibleBacklightsAndIndicatorsOnAtIntensity",
      #   "result": null
      # }
      setVisibleBacklightsAndIndicatorsOff
      # {
      #   "id": "setVisibleBacklightsAndIndicatorsOff",
      #   "result": null
      # }
      addVisibleBacklightsPwm ?
      # {
      #   "id": "addVisibleBacklightsPwm",
      #   "result": {
      #     "name": "addVisibleBacklightsPwm",
      #     "firmware": "FlyBowlController",
      #     "parameters": [
      #       "intensity",
      #       "pulse_delay",
      #       "pulse_period",
      #       "pulse_on_duration",
      #       "pulse_count"
      #     ],
      #     "result_info": {
      #       "type": "long"
      #     }
      #   }
      # }
      addVisibleBacklightsPwm 6.0 5000 100 50 1000
      # {
      #   "id": "addVisibleBacklightsPwm",
      #   "result": 0
      # }
      stopPwm 0
      # {
      #   "id": "stopPwm",
      #   "result": null
      # }
      setIrBacklightsAndFansOff
      # {
      #   "id": "setIrBacklightsAndFansOff",
      #   "result": null
      # }
    #+END_SRC

*** Python

    #+BEGIN_SRC python
      from modular_client import ModularClient
      dev = ModularClient(timeout=0.1) # Automatically finds device if one available
      dev.get_device_id()
      # {'name': 'fly_bowl_controller', 'form_factor': '5x3', 'serial_number': 0}
      dev.set_properties_to_defaults(['ALL'])
      dev.fly_bowls_enabled('getValue')
      # [True, True, True, True]
      dev.fly_bowls_enabled('setValue',[True,False,True,False])
      # [True, False, True, False]
      dev.ir_backlight_power_to_intensity_ratio('setValue',[5.99,5.59,5.41,5.57])
      # [5.99, 5.59, 5.41, 5.57]
      dev.visible_backlight_power_to_intensity_ratio('setValue',[14.66,15.87,14.04,14.77])
      # [14.66, 15.87, 14.04, 14.77]
      dev.set_ir_backlights_and_fans_on_at_intensity(4.5) # 4.5 mW/mm^2
      dev.remove_all_experiment_steps()
      intensity = 1.71 # 1.71 mW/mm^2
      pulse_period = 100 # 100 ms
      pulse_on_duration = 50 # 50 ms
      pulse_count = 5
      sequence_off_duration = 750 # 750 ms
      sequence_count = 4
      step_delay = 1.0 # 1.0 s
      step_duration = 6.0 # 6.0 s
      dev.add_experiment_step(intensity,
                              pulse_period,
                              pulse_on_duration,
                              pulse_count,
                              sequence_off_duration,
                              sequence_count,
                              step_delay,
                              step_duration)
      # 0
      intensity = 2.7 # 2.7 mW/mm^2
      pulse_period = 100 # 100 ms
      pulse_on_duration = 50 # 50 ms
      pulse_count = 35
      sequence_off_duration = 2500 # 2500 ms
      sequence_count = 4
      step_delay = 0.0 # 0.0 s
      step_duration = 20.0 # 20.0 s
      dev.add_experiment_step(intensity,
                              pulse_period,
                              pulse_on_duration,
                              pulse_count,
                              sequence_off_duration,
                              sequence_count,
                              step_delay,
                              step_duration)
      # 1
      dev.get_experiment_steps()
      # [{'intensity': 1.71,
      #   'pulse_period': 100,
      #   'pulse_on_duration': 50,
      #   'pulse_count': 5,
      #   'sequence_off_duration': 750,
      #   'sequence_count': 4,
      #   'step_delay': 1.0,
      #   'step_duration': 6.0},
      #  {'intensity': 2.7,
      #   'pulse_period': 100,
      #   'pulse_on_duration': 50,
      #   'pulse_count': 35,
      #   'sequence_off_duration': 2500,
      #   'sequence_count': 4,
      #   'step_delay': 0.0,
      #   'step_duration': 20.0}]
      dev.get_experiment_status()
      # {'state': 'EXPERIMENT_NOT_RUNNING',
      #  'experiment_step_index': 0,
      #  'experiment_step_count': 2,
      #  'sequence_index': 0,
      #  'sequence_count': 0}
      dev.run_experiment()
      dev.get_experiment_status()
      # {'state': 'EXPERIMENT_RUNNING',
      #  'experiment_step_index': 0,
      #  'experiment_step_count': 2,
      #  'sequence_index': 3,
      #  'sequence_count': 4}
      #
      # wait until experiment finishes or dev.stop_experiment()
      dev.get_experiment_status()
      # {'state': 'EXPERIMENT_NOT_RUNNING',
      #  'experiment_step_index': 0,
      #  'experiment_step_count': 2,
      #  'sequence_index': 0,
      #  'sequence_count': 0}
      dev.set_visible_backlights_and_indicators_on_at_intensity(4.6) # 4.6 mW/mm^2
      dev.set_visible_backlights_and_indicators_off()
      dev.add_visible_backlights_pwm('?')
      # {'name': 'addVisibleBacklightsPwm',
      #  'firmware': 'FlyBowlController',
      #  'parameters': ['intensity',
      #                 'pulse_delay',
      #                 'pulse_period',
      #                 'pulse_on_duration',
      #                 'pulse_count'],
      #  'result_info': {'type': 'long'}}
      intensity = 6.0 # 6.0 mW/mm^2
      pulse_delay = 1000 # 1000 ms
      pulse_period = 100 # 100 ms
      pulse_on_duration = 50 # 50 ms
      pulse_count = 1000
      pwm_index = dev.add_visible_backlights_pwm(intensity,
                                                 pulse_delay,
                                                 pulse_period,
                                                 pulse_on_duration,
                                                 pulse_count)
      dev.stop_pwm(pwm_index)
      dev.set_ir_backlights_and_fans_off()
    #+END_SRC

*** Matlab

    #+BEGIN_SRC matlab
      % Linux and Mac OS X
      ls /dev/tty*
      % example Linux serial port
      serial_port = '/dev/ttyACM0'
      % example Mac OS X serial port
      serial_port = '/dev/tty.usbmodem262471'
      % Windows
      getAvailableComPorts()
      % 'COM1'
      % 'COM4'
      % example Windows serial port
      serial_port = 'COM4';
      dev = ModularClient(serial_port); % creates a device object
      dev.open();                       % opens a serial connection to the device
      dev.getDeviceId()
      %          name: 'fly_bowl_controller'
      %   form_factor: '5x3'
      % serial_number: 0
      dev.setPropertiesToDefaults({'ALL'});
      dev.flyBowlsEnabled('getValue')
      % [1]    [1]    [1]    [1]
      dev.flyBowlsEnabled('setValue',{true,false,true,false})
      % [1]    [0]    [1]    [0]
      dev.irBacklightPowerToIntensityRatio('setValue',{5.99,5.59,5.41,5.57})
      % [5.99]    [5.59]    [5.41]    [5.57]
      dev.visibleBacklightPowerToIntensityRatio('setValue',{14.66,15.87,14.04,14.77})
      % [14.66]    [15.87]    [14.04]    [14.77]
      dev.setIrBacklightsAndFansOnAtIntensity(4.5); % 4.5 mW/mm^2
      dev.removeAllExperimentSteps();
      intensity = 1.71; % 1.71 mW/mm^2
      pulse_period = 100; % 100 ms
      pulse_on_duration = 50; % 50 ms
      pulse_count = 5;
      sequence_off_duration = 750; % 750 ms
      sequence_count = 4;
      step_delay = 1.0; % 1.0 s
      step_duration = 6.0; % 6.0 s
      dev.addExperimentStep(intensity, ...
                            pulse_period, ...
                            pulse_on_duration, ...
                            pulse_count, ...
                            sequence_off_duration, ...
                            sequence_count, ...
                            step_delay, ...
                            step_duration)
      % 0
      intensity = 2.7; % 2.7 mW/mm^2
      pulse_period = 100; % 100 ms
      pulse_on_duration = 50; % 50 ms
      pulse_count = 35;
      sequence_off_duration = 2500; % 2500 ms
      sequence_count = 4;
      step_delay = 0.0; % 0.0 s
      step_duration = 20.0; % 20.0 s
      dev.addExperimentStep(intensity, ...
                            pulse_period, ...
                            pulse_on_duration, ...
                            pulse_count, ...
                            sequence_off_duration, ...
                            sequence_count, ...
                            step_delay, ...
                            step_duration)
      % 1
      experiment_steps = dev.getExperimentSteps();
      experiment_steps{1}
      %             intensity: 1.71
      %          pulse_period: 100
      %     pulse_on_duration: 50
      %           pulse_count: 5
      % sequence_off_duration: 750
      %        sequence_count: 4
      %            step_delay: 1
      %         step_duration: 6
      experiment_steps{2}
      %             intensity: 2.7
      %          pulse_period: 100
      %     pulse_on_duration: 50
      %           pulse_count: 35
      % sequence_off_duration: 2500
      %        sequence_count: 4
      %            step_delay: 0
      %         step_duration: 20
      dev.getExperimentStatus()
      %                 state: 'EXPERIMENT_NOT_RUNNING'
      % experiment_step_index: 0
      % experiment_step_count: 2
      %        sequence_index: 0
      %        sequence_count: 0
      dev.runExperiment()
      dev.getExperimentStatus()
      %                 state: 'EXPERIMENT_RUNNING'
      % experiment_step_index: 0
      % experiment_step_count: 2
      %        sequence_index: 2
      %        sequence_count: 4
      %
      % wait until experiment finishes or dev.stopExperiment()
      dev.getExperimentStatus()
      %                 state: 'EXPERIMENT_NOT_RUNNING'
      % experiment_step_index: 0
      % experiment_step_count: 2
      %        sequence_index: 0
      %        sequence_count: 0
      dev.setVisibleBacklightsAndIndicatorsOnAtIntensity(4.6); % 4.6 mW/mm^2
      dev.setVisibleBacklightsAndIndicatorsOff();
      intensity = 6.0; % 6.0 mW/mm^2
      pulse_delay = 1000; % 1000 ms
      pulse_period = 100; % 100 ms
      pulse_on_duration = 50; % 50 ms
      pulse_count = 1000;
      pwm_index = dev.addVisibleBacklightsPwm(intensity, ...
                                              pulse_delay, ...
                                              pulse_period, ...
                                              pulse_on_duration, ...
                                              pulse_count);
      dev.stopPwm(pwm_index);
      dev.setIrBacklightsAndFansOff();
      dev.close();
      clear dev;
    #+END_SRC

** Example Experiment Step Waveform

   Yellow waveform shows visible backlight.

   Blue waveform shows visible backlight indicator LED.

*** Step Duration

    step_duration = 6.0 s

   [[file:./images/waveform/step_duration.png]]

*** Step Delay

    step_delay = 1.0 s

   [[file:./images/waveform/step_delay.png]]

*** Sequence Count

    sequence_count = 4

   [[file:./images/waveform/sequence_count.png]]

*** Sequence Off Duration

    sequence_off_duration = 750 ms

   [[file:./images/waveform/sequence_off_duration.png]]

*** Pulse Count

    pulse_count = 5

   [[file:./images/waveform/pulse_count.png]]

*** Pulse On Duration

    pulse_on_duration = 50 ms

   [[file:./images/waveform/pulse_on_duration.png]]

*** Pulse Period

    pulse_period = 100 ms

   [[file:./images/waveform/pulse_period.png]]

*** Intensity

    intensity = 1.71 mW/mm^2 (power = 25 %)

   [[file:./images/waveform/intensity.png]]

* Build Instructions
